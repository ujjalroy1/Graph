#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template <class type1>
#define ll long long int
#define endl "\n"
#define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
using ordered_multiset = tree <type1, null_type, less_equal <type1>, rb_tree_tag, tree_order_statistics_node_update>;
 //ordered_multiset <ll> kek;(declaration for multiorder set)
// ordered_set o_set;(declaration)
//kek.order_of_key(i);(strictly less then i for multi order set)
//o_set.order_of_key(5) ;(strictly less then i for multi order set)
#define yes cout << "YES\n"
#define no cout << "NO\n"
#define mod 1000000007
ll POW(ll a,ll b)
{   ll ans=1;
   while(b>0)
   {   if(b%2)ans=(ans*a)%mod;
       b/=2;
       a=(a*a)%mod;
   }
   return ans;
}
vector<ll>adj[100000];
ll subtre[100000];
ll val[100000];
void dfs(ll node,ll par)
{

      subtre[node]=val[node];
         // cout<<subtre[node]<<" "<<val[node]<<endl;

      for(auto u:adj[node])
      {
          if(par==u)continue;
          dfs(u,node);
          subtre[node]+=subtre[u];

      }
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
   
     ll n,i;
     cin>>n;
     for(i=1;i<n;i++)
     {
         ll u,v;
         cin>>u>>v;
         adj[v].push_back(u);
         adj[u].push_back(v);
     }
     for(i=1;i<=n;i++)
     {
               cin>>val[i];
               cout<<val[i]<<" ";
     }

      dfs(1,-1);
      ll ans=0;
      //cout<<subtre[1]<<" ";
      for(i=2;i<=n;i++)
      {
              // cout<<subtre[i]<<" ";

         
           ll sum1=subtre[i];
           ll sum2=subtre[1]-sum1;
           ans=max(ans,sum1*sum2);
      }
      cout<<ans<<endl;


    return 0;
}
