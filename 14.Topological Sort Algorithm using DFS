#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template <class type1>
#define ll long long int
#define endl "\n"
#define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
using ordered_multiset = tree <type1, null_type, less_equal <type1>, rb_tree_tag, tree_order_statistics_node_update>;
 //ordered_multiset <ll> kek;(declaration for multiorder set)
// ordered_set o_set;(declaration)
//kek.order_of_key(i);(strictly less then i for multi order set)
//o_set.order_of_key(5) ;(strictly less then i for multi order set)
#define yes cout << "YES\n"
#define no cout << "NO\n"
vector<ll>adj[100000];
ll vis[100000];
stack<ll>st;
void dfs(ll node)
{
     vis[node]=1;
     for(auto u:adj[node])
     {
          if(vis[u]==0)
          {
             dfs(u);
          }
     }
     st.push(node);
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
   
   ll n,m,i,j;
   cin>>n>>m;
   for(i=1;i<=m;i++)
   {
      ll u,v;
      cin>>u>>v;
      adj[u].push_back(v);
   }
  for(i=1;i<=n;i++)
  {
      if(vis[i]==0)
      {
          dfs(i);
      }
  }
   while(!st.empty())
   {
     cout<<st.top()<<" ";
     st.pop();
   }

    return 0;
}
