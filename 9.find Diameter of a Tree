#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template <class type1>
#define ll long long int
#define endl "\n"
#define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
using ordered_multiset = tree <type1, null_type, less_equal <type1>, rb_tree_tag, tree_order_statistics_node_update>;
 //ordered_multiset <ll> kek;(declaration for multiorder set)
// ordered_set o_set;(declaration)
//kek.order_of_key(i);(strictly less then i for multi order set)
//o_set.order_of_key(5) ;(strictly less then i for multi order set)
#define yes cout << "YES\n"
#define no cout << "NO\n"
#define N 100000
ll dept[N];
vector<ll>adj[N];
void dfs(ll node,ll par)
{
     for(auto u:adj[node])
     {
         if(u==par)continue;
         dept[u]=dept[node]+1;
         dfs(u,node);
     }
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
   
  ll n,m,i,j;
  cin>>n;
  for(i=1;i<=n-1;i++)
  {
      ll u,v;
      cin>>u>>v;
      adj[u].push_back(v);
      adj[v].push_back(u);
  }
  dfs(1,-1);
  ll dep=-1;
  ll node;
  for(i=1;i<=n;i++)
  {
     if(dept[i]>dep)
     {
         dep=dept[i];
         node=i;
     }
     dept[i]=0;
  }
  dfs(node,-1);
  dep=-1;
    for(i=1;i<=n;i++)
  {
     if(dept[i]>dep)
     {
         dep=dept[i];
        
     }
    
  }
  cout<<dep<<endl;

    return 0;
}
